#!/bin/bash

# Unofficial Bash Strict Mode (http://redsymbol.net/articles/unofficial-bash-strict-mode/)
set -euo pipefail


MAX_WAIT_SECS=120


function print_usage()
{
    echo "usage: $0 job_spec [job_spec...]"
    echo
    echo "Waits for completion of the specified jobs."
} >&2


if (( $# == 0 ));
then
    print_usage

    exit 1
fi


function all_done()
{
    local IFS=','
    local NUM_WAITING
    # NOTE the additional job ID 1 prevents an error that only occurrs if a
    #      single job ID is given.
    NUM_WAITING="$({ squeue -hro '' "-j1,$*"; } | wc -l)"

    (( NUM_WAITING == 0 ))
}


function count_regsitered_jobs()
{
    local IFS=','

    sacct --jobs="$*" --noheader --parsable2 -o '' | wc -l
}


function exit_with_job_status()
{
    local IFS=','

    sacct --jobs="$*" --noheader --parsable2 -o State,ExitCode | \
    awk '
        function max(a, b)
        {
            return a < b ? b : a;
        }

        BEGIN {
            EXIT = 0;
            FS = "[:|]+";
            OFS = ";"
        }

        {
            EXIT = $1 == "COMPLETED" ? max(EXIT, max($2, $3)) : 1;

            if (EXIT > 0)
                exit EXIT;
        }
    '
}


STARTED_AT="$(date +%s)"
while ! all_done "$@";
do
    sleep 15

    if [[ -v MAX_WAIT_SECS ]] && (( $(date +%s) - STARTED_AT >= MAX_WAIT_SECS ));
    then
        if (( $(count_regsitered_jobs "$@") < $# ));
        then
            echo "$0: invalid job ids: still cannot access accounting information after $MAX_WAIT_SECS seconds" >&2

            exit 1
        else
            unset MAX_WAIT_SECS
        fi
    fi
done

exit_with_job_status "$@"
